git 分布是版本控制系统

1.创建一个git仓库
	mkdir filename 创建一个文件夹名称
	pwd 用于显示当前目录

2.添加文件到git

	git add filename 文件名称
	git commit -m “提交的说明”

3.git status 查看文件是否有修改

	采用 git diff filename 查看具体修改的内容   ，之后用git add 和git commit 提交文件

4.版本回退

    查看历史记录 git log
    查看命令历史 git reflog
  
    回退的命名是git reset --hard HEAD^  或者 git reset --hard 版本号
5.管理修改
    git跟踪并管理的是修改，而非文件
6.cat filename 功能是显示文件的内容
	git checkout 撤销修改
	git checkout -- filename 作用是把文件在工作区的修改全部撤销：
	（1）文件自修改后还没被放到暂存区，现在撤销，就是回到和版本库一模一样的状态；
	（2）文件已添加到暂存区，之后又做了修改，现在撤销，就是回到添加到暂存区的状态。
7.删除文件
   （1）直接在文件夹中删除，并且提交，就行
   （2）命令 rm filename ，之后
       1）. 若真想把版本库中的文件删除，则需要执行 git rm filename ；git coommit -m “理由”
	   2）. 若删错了，则需要 git checkout -- filename
8.远程仓库
    GitHub提供Git仓库托管服务，只要注册一个账号，就可以免费获得Git远程仓库
    需要创建SSH Key：命令 ssh-keygen -t rsa -C “注册的邮箱”
    生成的 .SSH 在C:/Doucments and Settings/Administrator/.ssh
    注: -a 显示隐藏文件
9.将远程仓库与本地仓库关联，之后把本地仓库的内容推送到GitHub仓库中
    命令为：
		git remote add origin http://github.com/qianyuzhang/learngit.git
		其中qianyuzhang 是我在GitHub中注册的用户名，learngit是我在GitHub中建的仓库（repositories），
		    origin 是远程库的名字，这是git的默认叫法
	命令 ：git push -u origin master  
		这一步的命令就是把本地库的所有内容推送到远程库上；
	注意：
	     将本地库的内容推送到远程用git push 命令，实际上是吧当前的分支master推送到远程上。
10.从现在开始，只要本地commit，就可以通过：git push origin master 命令 把本地master分支的最新修改推送到GitHub上；
	注意：SSH警告
		当第一次使用Git 的clone 或 push 命令链接GitHub时会得到一个警告，输入yes,回车即可。
11.从远程库克隆项目到本地
	开始 在GitHub 中建立一个远程库 studygit ，记住勾选 Initialize this repository with a README，这样GitHub会自动为我们
	创建一个README.md文件。之后，可以用命令git clone 克隆一个本地库。
	命令：
	     git clone http://github.com/qianyuzhang/studygit.git
		 或者
		 git clone git@github.com:qianyuzhang/studygit.git
	注意：Git支持多种协议，包括https（比较慢），但是通过ssh支持的原生的git协议最快。
12.分支管理
	Git 的分支是与众不同的，无论创建、切换和删除分支，Git 在1秒钟之内就能完成，无论你的版本库是1个文件还是1万个文件。
	创建与合并分支
	实战：
		创建dev分支，并切换到dev分支
		命令：
			git checkout -b dev
			等价于：
			     git branch dev
				 git checkout dev
		之后，可以采用git branch 查看当前分支，其中，分支前面有“*”的是指当前分支；
		将分支切换到dev上之后，我们就可以正常额提交了；
		在dev上完成工作之后，切换到master分支上，
		命令：
			git checkout master
		之后，将dev上的内容合并到master分支上，
		命令：
			git merge dev
			注意：git merge 命令用于合并指定的分支到当前分支上。
		合并完成后，可以将dev分支删除
		命令：
			git branch -d dev
			
    分支相关小结：
		查看分支 git branch  ;创建分支：git branch <name>;
		切换分支 git checkout <name>  ;创建+切换分支 git checkout -b <name>  ;
		合并某分支到当前分支 git merge <name>;
		删除分支 git branch -d <name>	
13.解决冲突
	人生不如意之事十之八九，合并分支往往不是一帆风顺的，
		准备新的分支 dev1 ，并作修改，之后在该分支上提交；
		之后，切换到分支master，修改之后提交；
		之后，在master下，git merge dev1 ，此时产生了冲突，在文件中可以看到冲突，手动解决之后，提交即可。
	注意：
		采用命令：git log --graph   可以看到分支合并图
14.分支管理策略
	通常，合并分支的时候，如果可能，Git会用Fast forward 模式，但是这种模式下，删除分支后，会丢掉分支的信息，如果要强制
	禁用 Fast forward 模式，Git就会在merge时生成一个新的commit，这样从分支历史就可以看出分支信息。
	下面实战一下--no--ff 方式的git merge：
		首先，创建并切换到分支dev：git checkout -b dev；修改之后，提交：git add newfile，git commit -m "add merge"。
		之后，切换到master ：git checkout master。
		之后，准备合并dev 分支，注意：--no--ff参数表示禁用 fast forward；
		git merge --no--ff -m "merge with noff" dev
		合并之后，采用git log看分支历史：git log --graph --pretty=oneline --abbrev-commit
	 
	 分支策略：
		在实际开发中，我们应该按照几个基本原则进行分支处理：
		首先，master分支应该是最稳定的也就是仅用来发布新的版本，平时不在上面干活；
		其次，干活都在dev 分支上，也就是说dev分支是不稳定的，到某些时候，就可以把dev上的合并到master上；
		最后，开发成员都在dev的分支上干活，每个人都有自己的分支，时不时的往dev上合并就行。
	小结：
		Git分支十分强大，在合并分支时，加上--no--ff参数，就可以用普通的模式合并，合并后的历史有分支，能看出来曾经做过合并；
		而fast forward模式下合并就看不出来曾经做过的合并。
15.BUG分支
	命令 ：git stash ,可以将当前的工作线程“储藏”起来，然后到需要修改的分支下，创建分支，修改bug，提交。
	之后，采用命令 git stash list 查看工作现场的情况，
	最后，恢复工作现场的方法：
		1）. 用git stash apply 恢复，但是恢复后，stash内容并不删除你需要用 git stash drop 来删除；
		2）. 用git stash pop 命令恢复，恢复的同时把stash的内容删除。
16.feature分支
	开发一个新功能。
		git checkout -b feature-new
	开发完成之后：
		git add new.py
		git status
	删除分支 git branch -d feature-new
	强制删除分支 git branch -D feature-new
17.多人协作
	因此，多人协作的工作模式通常是这样：
		首先，可以试图用git push origin branch-name推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
	这就是多人协作的工作模式，一旦熟悉了，就非常简单。
	小结：
		查看远程库信息：git remote -v；
		本地新建的分支如果不推送到远程上，对其他人是不可见的；
		从本地推送分支，使用 git push origin branch-name，如果推送失败，先用git pull远程抓取远程的新提交 ；
		在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name,本地和远程的分支最好一致；
		建立本地分支和远程分支的关联，使用 git branch --set-upstream branch-name origin/branch-name;
		从远程抓取分支，使用git pull，如果有冲突，先处理冲突。
18.标签管理
	标签是版本库的一个快照。但其实它就是指向某个commit的指针（跟分支很像，但是分支能移动，标签不能移动），所以创建和删除标签都是瞬间的事。
    （1）创建标签
		命令 ：git tag <tagname>
			可以用git tag 查看所有标签
	小结
		命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		用-a指定标签名，-m指定说明文字；还可以通过-s用私钥签名一个标签
		git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		命令git tag可以查看所有标签；
		命令 git show <name> 查看指定的标签信息。
	（2）操作标签
		删除标签：git tag -d <name>
	小结
		命令git push origin <tagname>可以推送一个本地标签；
		命令git push origin --tags可以推送全部未推送过的本地标签；
		命令git tag -d <tagname>可以删除一个本地标签；
		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
19.使用GitHub
	使用GitHub参与一个开源项目，例如：
		访问 https://github.com/twbs/bootstrap
		之后点击Fork ，就在自己的账号下克隆了一个bootstrap仓库，然后在自己的账号下clone即可，
		命令 ：git clone git@github.com:qianyuzhang/bootstrap.git
		这样就在本地生成一个bootsstrap仓库。
	小结：
		在GitHub上，可以任意Fork开源仓库；
		自己拥有Fork后的仓库的读写权限；
		可以推送pull request给官方仓库来贡献代码。
20.自定义Git
	（1）忽略特殊文件
		在根目录下创建一个.gitignore文件，然后把你要忽略的文件名填进去，Git就会自动忽略这些文件。
		详细，请访问网址 https://github.com/github/gitignore 
	（2）配置别名
		例如，告诉Git 以后使用st 表示status ，命令为：
		git config --global alias.st status
		其中，--global 是针对当前用户起作用，如果不加，则只针对代签仓库起作用。
		每个仓库的配置文件均放在.git/config 中，
		cat .git/config 
		当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中，
		cat .gitconfig中
	（3）
		


		

	
	
