git 分布是版本控制系统

1.创建一个git仓库
mkdir filename 创建一个文件夹名称
pwd 用于显示当前目录

2.添加文件到git

git add filename 文件名称
git commit -m “提交的说明”

3.git status 查看文件是否有修改

采用 git diff filename 查看具体修改的内容   ，之后用git add 和git commit 提交文件

4.版本回退

  查看历史记录 git log
  查看命令历史 git reflog
  
  回退的命名是git reset --hard HEAD^  或者 git reset --hard 版本号
5.管理修改
  git跟踪并管理的是修改，而非文件
6.cat filename 功能是显示文件的内容
	git checkout 撤销修改
	git checkout --filename 作用是把文件在工作区的修改全部撤销：
	（1）文件自修改后还没被放到暂存区，现在撤销，就是回到和版本库一模一样的状态；
	（2）文件已添加到暂存区，之后又做了修改，现在撤销，就是回到添加到暂存区的状态。
7.删除文件
  （1）直接在文件夹中删除，并且提交，就行
  （2）命令 rm filename ，之后
       1）. 若真想把版本库中的文件删除，则需要执行 git rm filename ；git coommit -m “理由”
	   2）. 若删错了，则需要 git checkout -- filename
8.远程仓库
   GitHub提供Git仓库托管服务，只要注册一个账号，就可以免费获得Git远程仓库
   需要创建SSH Key：命令 ssh-keygen -t rsa -C “注册的邮箱”
   生成的 .SSH 在C:/Doucments and Settings/Administrator/.ssh
   注: -a 显示隐藏文件
9.将远程仓库与本地仓库关联，之后把本地仓库的内容推送到GitHub仓库中
   命令为：
		git remote add origin http://github.com/qianyuzhang/learngit.git
		其中qianyuzhang 是我在GitHub中注册的用户名，learngit是我在GitHub中建的仓库（repositories），
		    origin 是远程库的名字，这是git的默认叫法
	命令 ：git push -u origin master  
		这一步的命令就是把本地库的所有内容推送到远程库上；
	注意：
	     将本地库的内容推送到远程用git push 命令，实际上是吧当前的分支master推送到远程上。
10.从现在开始，只要本地commit，就可以通过：git push origin master 命令 把本地master分支的最新修改推送到GitHub上；
	注意：SSH警告
		当第一次使用Git 的clone 或 push 命令链接GitHub时会得到一个警告，输入yes,回车即可。
11.从远程库克隆项目到本地
	开始 在GitHub 中建立一个远程库 studygit ，记住勾选 Initialize this repository with a README，这样GitHub会自动为我们
	创建一个README.md文件。之后，可以用命令git clone 克隆一个本地库。
	命令：
	     git clone http://github.com/qianyuzhang/studygit.git
		 或者
		 git clone git@github.com:qianyuzhang/studygit.git
	注意：Git支持多种协议，包括https（比较慢），但是通过ssh支持的原生的git协议最快。
12.分支管理
	Git 的分支是与众不同的，无论创建、切换和删除分支，Git 在1秒钟之内就能完成，无论你的版本库是1个文件还是1万个文件。
	创建与合并分支
	实战：
		创建dev分支，并切换到dev分支
		命令：
			git checkout -b dev
			等价于：
			     git branch dev
				 git checkout dev
		之后，可以采用git branch 查看当前分支，其中，分支前面有“*”的是指当前分支；
		将分支切换到dev上之后，我们就可以正常额提交了；
		在dev上完成工作之后，切换到master分支上，
		命令：
			git checkout master
		之后，将dev上的内容合并到master分支上，
		命令：
			git merge dev
			注意：git merge 命令用于合并指定的分支到当前分支上。
		合并完成后，可以将dev分支删除
		命令：
			git branch -d dev
			
    分支相关小结：
		查看分支 git branch  ;创建分支：git branch <name>;
		切换分支 git checkout <name>  ;创建+切换分支 git checkout -b <name>  ;
		合并某分支到当前分支 git merge <name>;
		删除分支 git branch -d <name>	
13.解决冲突
	人生不如意之事十之八九，合并分支往往不是一帆风顺的，
	准备新的分支 dev1 ，并作修改，之后在该分支上提交；
	之后，切换到分支master，修改之后提交；
	之后，在master下，git merge dev1 ，此时产生了冲突，在文件中可以看到冲突，手动解决之后，提交即可。
	注意：采用命令：git log --graph   可以看到分支合并图
14.分支管理策略
	

		
		
		  
