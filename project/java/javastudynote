			JAVA相关学习
	Java语言是一个纯的面向对象设计语言
	Java 开发工具
		IDE：Eclipse
	运行Java程序，文件名为HelloWorld.java
		命令 ：
			> javac HelloWorld.java
			> java HelloWorld
			结果
1.基本语法
	注意：
		1)大小写敏感。
		2)类名：对于所有的类来说，类名首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写
			eg.MyFirstJavaClass
		3)方法名，所有的方法名都应该以小写字母开头，如果方法名含有若干的单词，则后面的每个单词首字母大写
			eg.myFirstFunction
		4)源文件名称
			源文件名必须和类名相同，当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感），
			文件名的后缀是.java。（如果文件名和类名不相同，会导致编译错误）
		5)主方法入口：所有的Java程序由Public Static void main(String []args)方法开始执行
2.Java标识符
	Java所有的组成部分都需要名字。类、变量名及方法名都被成为标示符。
	关于标识符，有以下几点需要注意：
		1)所有标识符都应该以字母、美元符或下划线开始；
		2)首字母之后可以是任意字符的组合；
		3)关键字不能用作标识符；
		4)标识符是大小写敏感的。
3.Java修饰符
	像其他语言一样，Java可以使用修饰符来修饰类中的方法和属性
	主要有两类修饰符：
	1）可访问修饰符：default，public，protected，private
	2）不可访问的修饰符：final，abstract，strict
4.Java变量
	局部变量
	类变量（静态变量）
	成员变量（非静态变量）
5.Java数组
	数组是储存在堆上的对象，可以保存多个同类型的变量
6.Java枚举
	Java5.0引入了枚举，枚举限制变量只能是预先设定好的值，使用枚举可以减少代码中的bug
	注意：枚举可以单独声明，也可以声明在类里面。方法、变量、构造函数也可以在枚举中定义
7.继承
	在Java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的方法或属性，那么你可以
	将新创建的类继承该类。
	利用继承方法，可以重用已经存在的类的方法和属性。而不用重写这些代码。被继承的类成为超类（super class），
	派生类成为子类（subclass）。
8.接口
	在Java中，接口可理解为对象间相互通信的协议。接口在继承中扮演者很重要的角色。接口只定义派生要用到的方法，
	但是方法的具体实现完全取决于派生类。
9.Java对象和类
	基本概念：多态、继承、封装、抽象、类、对象、实例、方法、消息解析
	对象：是类的一个实例，有状态和行为。
	类：是一个模板，它描述一类对象的行为和状态。
		eg. public class Dog {
				String breed;
				int age;
				String color;
				void barking(){
				}
				void hungry(){
				}
				void sleeping(){
				}
			}
		注意问题：
			1）一个类可以包含一下类型的变量：
				局部变量：在方法、构造函数或者语句块中定义的变量
				成员变量：是定义在类中，方法体之外的变量，这种变量在创建对象的时候实例化。
						  成员变量可以被类中的方法、构造方法和特定的类的语句块访问
				类变量： 声明在类中，方法体之外，但是必须声明为static类型。
			2）每个类都有构造方法，在创建对象的时候，至少要调用一个构造方法。构造方法的名称必须与类名相同，一个类可以有多个构造方法
				如果没有显式地为类定义构造方法,Java编辑器将会为该类提供一个默认的构造方法
					eg. public class Puppy{
							public Puppy(){...}
							public Puppy(String name){
								...
							}
						}
10. 使用关键字new来创建一个对象，使用new创建对象时，会调用构造方法，初始化对象
	eg.		public class Puppy{
				public Puppy(String name){
					//这个构造器只有一个参数
					System.out.println("Passed Name :"+name);
				}
				public static void main(String []args){
					Puppy myPuppy=new Puppy("Tom")'
				}
			}
			注意：通过以创建的对象来访问成员变量和成员方法。
			