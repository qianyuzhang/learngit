					JavaScript 相关学习
	学习JavaScript的原因，简单粗暴的说是：因为没有选择。在Web世界里，只有JavaScript能够跨平台，跨浏览器驱动网页，与用户交互。
	JavaScript与Java的区别：除去语法上有点像Java，其他部分基本上没啥关系。但是JavaScript也有很多设计缺陷。
	
	JavaScript相关注意问题
1. javascript严格区分大小写，如果弄错了大小写，程序将会报错或者运行不正常；
2. Infinity表示无限大，js中的比较建议用“===”
	“==”会自动转换数据类型在比较，很多时候会得到很诡异的结果；
	“===”不会自动转换数据类型，如果类型不一致，则返回false
	NaN（Not a Number），NaN与其他所有值都不等，包括它自己，即NaN===NaN;返回false;
	判断NaN的方法是isNaN，即isNaN（NaN）;返回true;
3.字符串与数组
	字符串是不可变的，如果对字符串的某个索引进行赋值，不会有任何错误，但是也没有任何效果。
	toUpperCase（） 把一个字符串全部变为大写；
	toLowerCase（） 把一个字符串全部变为小写；
	indexOf（） 会搜索指定字符串出现的位置；
	substring（0，5） 返回指定索引区间的字串0<=x<5;
	
	注意：
		直接给Array的length赋一个新的值会导致Array的大小的变化；
		如果通过索引赋值，索引超过了范围，同样引起Array的大小的变化；
	slice（） 截取Array的部分元素，燃火返回一个新的Array，slice（0，3）起止参数包括开始索引，不包括结束索引；
	push（） 向Array末位添加若干元素；
	pop（） 把Array的最后一个元素删除掉；
	unshift（） 往数组头部添加若干元素；
	shift（） 把数组元素的第一个元素删除；
	sort（） 对当前Array排序；
	reverse（） 把整个Array的元素给掉个个，即反转；
	splice（） 修改Array的“万能方法”，它可以从指定的索引开始删掉若干元素，然后再从该位置添加若干元素。
		eg. var arr= ['A','B','C','D','E','F'];
			arr.splice（2,3,'H','I'）;//arr = ['A','B','H','I','F'];
			只删不加：
				arr.splice（2,2);//arr = ['A','B','F'];
			只添加不删：
				arr.splice（2,0,'c','d');//arr = ['A','B','c','d','F'];
	concat（） 把当前Array与另一个Array链接起来，并返回一个新Array，
		实际上，concat（） 方法可以接受任意个与元素和Array，并且自动的把Array拆开全部添加到新的Array里。
	join（） 把当前Array的每个元素都用指定的字符串链接起来，然后返回链接后的字符串。
		eg. var arr = [1,2,3,4,5];
			arr.jion('-');//1-2-3-4-5）
4.对象
	javascript采用{...}表示一个对象，键值以key：value形式申明，之间用“，”隔开，获取属性通过“.”操作符完成；
	也可以采用xx['shuxingname'],来访问属性。
	删除属性 delete xx.shuxingname  
	如果我们要判断一个属性的存在，用“in”
		注意：
			用“in”判断一个属性存在，这个属性不一定是该对象的，也有可能是该对象继承的；
			如果要判断一个属性是否是该对象自身拥有的，而不是继承得到的，可以用hasOwnProperty（）方法。
5.条件判断与循环
	注意：Javascript 把null，undefined，0，NaN和空字符串“”，视为false，其他值视为true。
	      循环的三个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环。
			eg. var x=0;
				for(;;){
					if(x>100){
						break;
					}
					x++;
				}
		  for...in循环，可以把一个对象的所有属性都循环出来：
			eg. var arr={name:'jack',age:'26'};
				for (var key in arr){
				alert（key）；}
6.Map和Set
	Map是一组键值对结构，具有极快的查找速度。
		eg. var m = new Map([['Mike',95],['Bob',85],['Tom','75']]);
				m.get('Mike');//95
	Map具有以下方法：
		var m = new Map();
			m.set('Doc',86);//添加一个新的key-value
			m.set('Bob',59);//修改一个key-value 
			m.has('Tom');//是否存在‘Tom’;true
			m.get('Doc');//86
			m.delete('Doc');//删除Tom
			m.get('Doc');//undefined 
		注：对于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的直冲掉。
	Set 与Map类似，是一组key的集合，但是不存储value，由于key不能重复，所以，在Set中没有重复的key。
		eg. var s1=new Set();
				s2 = new Set([1,2,3,4,5]);
			注：重复元素在Set中自动被过滤；
	Set 方法：
		s2.add(6);
		s2.delete(5);
7.iterable
	注：Array，Map和Set都属于iterable类型
		1）具有iterable类型的集合都可以通过for...of循环遍历
			for...in和for...of的区别  :for...of 只循环集合本身的元素
			eg. var a=['A','B','C','D'];
					a.name='hello';
					for (var x in a){
						alert(x);//A,B,C,D,name
					}
					for (var y of a){
						alert(y);//A,B,C,D
					}
		2）iterable的内置forEach方法
			Array   eg. var a=['A','B','C'];
							a.forEach(function(element,index,array){
								alert(element);
							});
							//element 当前元素的值
							//index 指向当前的索引
							//array 指向array对象本身
			Set 与Array类似，但是Set没有索引，前两个参数都是元素本身
					eg. var a=new Set(['A','B','C']);
							a.forEach(function (element,sameelement,set){
								alert(element);
							});
			Map 的回调函数参数依次是value，key，map本身
					eg. var a = new Map([['A',96],['B',85],['C',75]]);
							a.forEach(function(value,key,map){
								alert(value);
							});
			以上三个，可以综合为一个：
					eg. var a=['A','B','C'];
							a.forEach(function(element){
								alert(element);
							});
8.函数
	1)函数的定义方法：function abs(x){...}
					  var abs = function(x){...}
	2）arguments：
		JavaScript还有一个免费赠送的关键字arguments，它只在函数每步起作用，并且永远指向当前函数的调用者传入的所有参数。
		实际上，arguments最常用于判断传入参数的个数。
	3）rest参数：
		rest参数只能写在最后，前面用...标识。
	注：return {.....} ,要在同一行，不在同一行时要写成：
			return {
			。。。。}；否则会出错。
	4）变量
		全局作用域：不在任意函数内部定义的变量，具有全局作用域，全局变量会绑定到window上。
	5）高阶函数
		map/reduce
		map()作为高阶函数，实际上是把运算规则抽象了
			eg. function pow(){
					return x*x;
					}
				var arr=[1,2,3,4,5,6,7,8,9];
					arr.map(pow);//[1,4,9,16,25,36,49,64,81];
			注：map传入的参数是pow，即函数本身。
			eg. 将所有数字转化成字符串
				var arr=[1,2,3,4,5,6];
					arr.map(String);//['1','2','3','4','5','6']
		reduce()
			Array的reduce()是把一个函数作用在这个Array的[x1,x1,...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素累积计算，
			效果为：
				[x1,x2,x3,x4].reduce(f)=f(f(f(x1,x2),x3),x4);
				eg. var arr=[1,2,3,7,9];
						arr.reduce(function(x,y){
							return x+y;
						})//25
		filter()也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回到剩下的元素；
			和map()类似，Array的filter(),也接收一个函数。
			和map()不同的是，filter()把传入的函数依次作用于每一个元素，然后根据返回值是true还是false决定是留是弃。
				eg. var arr = [1,2,3,4,5,6,7,8,9];
						arr.filter(function(x){
							return x%2===0;
						});//2,4,6,8
		sort()排序算法
			sort()方法默认把所有元素先转换为string在排序
	6）闭包
		当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以闭包用起来简单，实现起来不易。
	7）箭头函数
		箭头函数相当于匿名函数，并简化了函数的定义
		eg. x=>x*x；
			(x,y)=>x*x+y*y；
			()=>3.14
	8）generator（生成器）
		定义如下：
			function* foo(x){
				yield x+1;
				yield x+2;
				return x+3;
			}
9.标准对象
	1）在Javascript 的世界里，一切都是对象，但是某些对象还是和其他对象不太一样，为了区分对象的类型，我们用typeof操作符获取对象的类型，
	它总是返回一个字符串：
		eg. typeof 123;//number
			typeof NaN;//number
			typeof 'ss';//string
			typeof true;//boolean
			typeof undefined;//undefined
			typeof Math.abs;//function
			typeof null;//object
			typeof [];//object
			typeof {};//object
		注：采用typeof无法区分null和Array与通常意义上的object--{}；
	2）包装对象
		number，boolean，string都有包装对象，包装对象用new创建。
			eg. var n=new Number(123);
				var b=new Boolean(true);
				var s=new String('str');
			包装对象和原始值用“===”比较会返回false
		所以，不要使用包装对象，但是如果不写new 则不是包装类型，可以用。
			eg. var n=Number(123);
					typeof n;//number
	在Javascript中有几条规则需要遵守：
		不要使用new Number(),new Boolean(),new String()创建包装对象;
		用parsInt()或parseFloat()来转换任意类型到number;
		用String来转换任意类型到string，或者直接调用某个对象的toString()方法;
		通常不必把任意类型转换成boolean再判断，因为可以直接写if(myVar){...};
		typeof操作符可以判断出number，boolean，string，function，undefined;
		判断Array要使用Array.isArray(arr);
		判断null要使用myvar===null;
		判断某个全局变量是否存在用typeof window.myVar==='undefined';
		判断函数内部某个便令是否存在用typeof myVar==='undefined';
		除了null和undefined之外的对象有toString()方法;
		number对象调用toString()会报SyntaxError 错：
			即，123.toString();//SyntaxError
			应做如下处理   ：
					123..toString()
				或 
					(123).toString()
10.Date
		Date对象用来表示时间和日期
		要获取系统的当前时间，采用：
		var now=new Date();
		创建时间和日期的Date对象，用：
		var d=new Date(2015,11,16,15,22,30,123);
		注：javascript的日期中月份的表示范围用整数0~11表示，其中0表示1月份，以此类推。
		var d=Date.parse('2015-12-16 15:25:30.123+...');
		
11.RegExp
	1）Javascript中，正则表达式是一种用来匹配字符串的强有力的武器。
		在正则表达式中，如果直接给出字符，就是精确匹配
		但是也可以用一些符号进行匹配，如下：
		(1) \d ：匹配一个数字
			\w ：匹配一个数字或字母
			 . ：可以匹配任意字符
			 * ：表示任意个字符，包括0个
			 + ：>=1个字符
			 ？：0或1个字符
			{n}：表示n个字符
			{n,m}：表示n-m个字符
			 \s：可以匹配一个空格，也包括Tab等空白符
			 注意：特殊字符在js中要用“\”进行转义			 
		(2)进阶
			要做到更精确的匹配，可以用“[]”表示范围。
			eg. [0-9a-zA-Z\_] 可以匹配字母数字和下划线
				A|B 可以匹配A或B
				^ 表示行的开头   ^\d 表示必须以数字开头
				$ 表示行的结束   
		(3)javascript有两种方式创建正则表达式
			一、直接通过/正则表达式/写出来
			二、通过 new RegExp('正则表达式')创建一个RegExp对象；
				eg. var reg1=/ABC\_001/;
						reg2=new RegExp('ABC\\_001');//注意字符串的转义问题
		(4)RegExp对象的test()方法用于测试给定的字符串是否符合条件：
				eg. var reg=/^\d{3}\_\d{3,8}$/;
						reg.test('010-12345');//true
						reg.test('010-12345x');//false
						reg.test('010 12345');//false
		(5)切分字符串
				采用split()
				eg  'a b  c'.split(' ');//['a','b',' ','c']
					'a b  c'.split(/\s+/);//['a','b,'c']
					'a,b,c d'.split(/[\s\,]+);//['a','b,'c','d']
		(6)分组
				用()表示的就是要提取分组
					eg. ^(\d{3})-(\d{3,8})$
					re = /^(\d{3})-(\d{3,8})$/;
					re.exce('010-123456');//['010-123456','010','123456']
				如果正则表达式上定义了组，则就可以在RegExp对象上用exec()方法取出字串，方法失败时，返回null。
		(7)贪婪匹配
				注：正则表达式默认是贪婪匹配，加个？就可以让\d+采用非贪婪匹配
				eg. var re=/^(\d+)(0*)$/
						re.exec(1023000);//['102300','1023000','']
						re1=/^(\d+?)(0*)$/
						re1.exec(1023000);//['102300','1023','000']
				
		(8)全局搜索
			javascript的正则表达式还有几个特殊的标志，其中最常用的是g，表示全局匹配。
				eg. var r1=/test/g;
				=>  var r2=new RegExp('test','g');
			全局匹配可以多次执行exec方法来搜索一个匹配的字符串，当我们指定g标志后，每次运行exec()，正则表达式本身会更新
			lastIndex属性，表示上一次匹配到的最后索引。
				eg. var s='Javascript,VBscript,Jscript';
					var re=/[a-zA-Z]+script/g;
					re.exec(s);//['Javascript']
					re.lastIndex;//10
					re.exec(s);//['VBscript']
					re.lastIndex;//19
					re.exec(s);//['Jscript']
					re.lastIndex;//27
					re.exec(s);//null
			注：全局搜索，不能使用/^...$/,那样最多只会匹配一次
				还可以指定i标志，表示忽略大小写；m标志，表示执行多行匹配。
12.JSON(Javascript Object Notation) 是一种数据交换格式
	JSON 的几种数据类型：
		number：和Javascript 的number一致；
		boolean：和Javascript 的boolean一致；
		string：和Javascript 的string一致；
		null：和Javascript 的null一致；
		array：Javascript 的Array的表达方式--[]；
		object：Javascript 的{。。。}的表达方式；
	注：JSON字符集是UTF-8，JSON字符串规定必须使用“”双引号，object的键页必须用双引号。
13.面向对象编程
	两个基本概念：类，是对象类型的模板；实例，是根据类创建的对象。
	但是javascript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象教程。
	采用object.create()方法传入一个原型对象
		eg. var arr=[1,2,3];
		其原型链是：arr->Array.prototype->object.prototype->null
		eg. function foo(){return 0;}
		其原型链是：foo->Function.prototype->object.prototype-null
	构造的函数需要用new来调用
		eg. function student(name){
				this.name=name;
				this.hello='hello';
			}
			var xiaoming=new student('xiaoming');
			其原型链是：xiaoming->student.prototype->object.prototype->null
14.浏览器相关
								
				
	

	