					JavaScript 相关学习
	学习JavaScript的原因，简单粗暴的说是：因为没有选择。在Web世界里，只有JavaScript能够跨平台，跨浏览器驱动网页，与用户交互。
	JavaScript与Java的区别：除去语法上有点像Java，其他部分基本上没啥关系。但是JavaScript也有很多设计缺陷。
	
	JavaScript相关注意问题
1. javascript严格区分大小写，如果弄错了大小写，程序将会报错或者运行不正常；
2. Infinity表示无限大，js中的比较建议用“===”
	“==”会自动转换数据类型在比较，很多时候会得到很诡异的结果；
	“===”不会自动转换数据类型，如果类型不一致，则返回false
	NaN（Not a Number），NaN与其他所有值都不等，包括它自己，即NaN===NaN;返回false;
	判断NaN的方法是isNaN，即isNaN（NaN）;返回true;
3.字符串与数组
	字符串是不可变的，如果对字符串的某个索引进行赋值，不会有任何错误，但是也没有任何效果。
	toUpperCase（） 把一个字符串全部变为大写；
	toLowerCase（） 把一个字符串全部变为小写；
	indexOf（） 会搜索指定字符串出现的位置；
	substring（0，5） 返回指定索引区间的字串0<=x<5;
	
	注意：
		直接给Array的length赋一个新的值会导致Array的大小的变化；
		如果通过索引赋值，索引超过了范围，同样引起Array的大小的变化；
	slice（） 截取Array的部分元素，燃火返回一个新的Array，slice（0，3）起止参数包括开始索引，不包括结束索引；
	push（） 向Array末位添加若干元素；
	pop（） 把Array的最后一个元素删除掉；
	unshift（） 往数组头部添加若干元素；
	shift（） 把数组元素的第一个元素删除；
	sort（） 对当前Array排序；
	reverse（） 把整个Array的元素给掉个个，即反转；
	splice（） 修改Array的“万能方法”，它可以从指定的索引开始删掉若干元素，然后再从该位置添加若干元素。
		eg. var arr= ['A','B','C','D','E','F'];
			arr.splice（2,3,'H','I'）;//arr = ['A','B','H','I','F'];
			只删不加：
				arr.splice（2,2);//arr = ['A','B','F'];
			只添加不删：
				arr.splice（2,0,'c','d');//arr = ['A','B','c','d','F'];
	concat（） 把当前Array与另一个Array链接起来，并返回一个新Array，
		实际上，concat（） 方法可以接受任意个与元素和Array，并且自动的把Array拆开全部添加到新的Array里。
	join（） 把当前Array的每个元素都用指定的字符串链接起来，然后返回链接后的字符串。
		eg. var arr = [1,2,3,4,5];
			arr.jion('-');//1-2-3-4-5）
4.对象
	javascript采用{...}表示一个对象，键值以key：value形式申明，之间用“，”隔开，获取属性通过“.”操作符完成；
	也可以采用xx['shuxingname'],来访问属性。
	删除属性 delete xx.shuxingname  
	如果我们要判断一个属性的存在，用“in”
		注意：
			用“in”判断一个属性存在，这个属性不一定是该对象的，也有可能是该对象继承的；
			如果要判断一个属性是否是该对象自身拥有的，而不是继承得到的，可以用hasOwnProperty（）方法。
5.条件判断与循环
	注意：Javascript 把null，undefined，0，NaN和空字符串“”，视为false，其他值视为true。
	      循环的三个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环。
			eg. var x=0;
				for(;;){
					if(x>100){
						break;
					}
					x++;
				}
		  for...in循环，可以把一个对象的所有属性都循环出来：
			eg. var arr={name:'jack',age:'26'};
				for (var key in arr){
				alert（key）；}
6.Map和Set
	Map是一组键值对结构，具有极快的查找速度。
		eg. var m = new Map([['Mike',95],['Bob',85],['Tom','75']]);
				m.get('Mike');//95
	Map具有以下方法：
		var m = new Map();
			m.set('Doc',86);//添加一个新的key-value
			m.set('Bob',59);//修改一个key-value 
			m.has('Tom');//是否存在‘Tom’;true
			m.get('Doc');//86
			m.delete('Doc');//删除Tom
			m.get('Doc');//undefined 
		注：对于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的直冲掉。
	Set 与Map类似，是一组key的集合，但是不存储value，由于key不能重复，所以，在Set中没有重复的key。
		eg. var s1=new Set();
				s2 = new Set([1,2,3,4,5]);
			注：重复元素在Set中自动被过滤；
	Set 方法：
		s2.add(6);
		s2.delete(5);
7.iterable
	注：Array，Map和Set都属于iterable类型
		1）具有iterable类型的集合都可以通过for...of循环遍历
			for...in和for...of的区别  :for...of 只循环集合本身的元素
			eg. var a=['A','B','C','D'];
					a.name='hello';
					for (var x in a){
						alert(x);//A,B,C,D,name
					}
					for (var y of a){
						alert(y);//A,B,C,D
					}
		2）iterable的内置forEach方法
			Array   eg. var a=['A','B','C'];
							a.forEach(function(element,index,array){
								alert(element);
							});
							//element 当前元素的值
							//index 指向当前的索引
							//array 指向array对象本身
			Set 与Array类似，但是Set没有索引，前两个参数都是元素本身
					eg. var a=new Set(['A','B','C']);
							a.forEach(function (element,sameelement,set){
								alert(element);
							});
			Map 的回调函数参数依次是value，key，map本身
					eg. var a = new Map([['A',96],['B',85],['C',75]]);
							a.forEach(function(value,key,map){
								alert(value);
							});
			以上三个，可以综合为一个：
					eg. var a=['A','B','C'];
							a.forEach(function(element){
								alert(element);
							});
8.函数
	
								
				
	

	